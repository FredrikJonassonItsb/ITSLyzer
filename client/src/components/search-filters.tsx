import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Separator } from '@/components/ui/separator';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';\nimport { Search, Filter, X, ChevronDown, Calendar, Building, Tag, Settings } from 'lucide-react';\nimport type { FilterOptions } from '@shared/schema';\n\ninterface SearchFiltersProps {\n  filters: FilterOptions;\n  availableOrganizations: string[];\n  availableCategories: string[];\n  availableDates: string[];\n  onFiltersChange: (filters: FilterOptions) => void;\n  onClearFilters: () => void;\n  totalResults?: number;\n}\n\nexport function SearchFilters({ \n  filters, \n  availableOrganizations, \n  availableCategories, \n  availableDates, \n  onFiltersChange, \n  onClearFilters,\n  totalResults \n}: SearchFiltersProps) {\n  const [isOrganizationsOpen, setIsOrganizationsOpen] = useState(false);\n  const [isCategoriesOpen, setIsCategoriesOpen] = useState(false);\n  const [isDatesOpen, setIsDatesOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(filters.searchQuery || '');\n\n  const updateFilters = (updates: Partial<FilterOptions>) => {\n    onFiltersChange({ ...filters, ...updates });\n  };\n\n  const handleSearchSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateFilters({ searchQuery: searchQuery.trim() || undefined });\n  };\n\n  const toggleArrayFilter = (key: keyof FilterOptions, value: string) => {\n    const currentArray = (filters[key] as string[]) || [];\n    const newArray = currentArray.includes(value)\n      ? currentArray.filter(item => item !== value)\n      : [...currentArray, value];\n    updateFilters({ [key]: newArray.length > 0 ? newArray : undefined });\n  };\n\n  const getActiveFiltersCount = () => {\n    let count = 0;\n    if (filters.searchQuery) count++;\n    if (filters.requirementTypes?.length) count++;\n    if (filters.organizations?.length) count++;\n    if (filters.categories?.length) count++;\n    if (filters.dates?.length) count++;\n    if (filters.userStatus?.length) count++;\n    if (filters.showOnlyNew) count++;\n    if (filters.showGrouped) count++;\n    return count;\n  };\n\n  const activeFiltersCount = getActiveFiltersCount();\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Sök och filtrera\n            {activeFiltersCount > 0 && (\n              <Badge variant=\"secondary\" className=\"ml-2\" data-testid=\"badge-active-filters\">\n                {activeFiltersCount}\n              </Badge>\n            )}\n          </CardTitle>\n          {activeFiltersCount > 0 && (\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={onClearFilters}\n              data-testid=\"button-clear-filters\"\n            >\n              Rensa alla\n            </Button>\n          )}\n        </div>\n        {totalResults !== undefined && (\n          <p className=\"text-sm text-muted-foreground\" data-testid=\"text-results-count\">\n            {totalResults.toLocaleString('sv-SE')} resultat\n          </p>\n        )}\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Search */}\n        <form onSubmit={handleSearchSubmit} className=\"space-y-2\">\n          <Label htmlFor=\"search\">Söktext</Label>\n          <div className=\"flex gap-2\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n              <Input\n                id=\"search\"\n                type=\"search\"\n                placeholder=\"Sök i kravtext...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-9\"\n                data-testid=\"input-search\"\n              />\n            </div>\n            <Button type=\"submit\" variant=\"outline\" data-testid=\"button-search\">\n              Sök\n            </Button>\n          </div>\n        </form>\n\n        <Separator />\n\n        {/* Requirement Types */}\n        <div className=\"space-y-3\">\n          <Label className=\"text-sm font-medium\">Kravtyp</Label>\n          <div className=\"flex gap-2\">\n            {['Skall', 'Bör'].map(type => (\n              <div key={type} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`req-type-${type}`}\n                  checked={filters.requirementTypes?.includes(type as any) || false}\n                  onCheckedChange={(checked) => {\n                    if (checked) {\n                      toggleArrayFilter('requirementTypes', type);\n                    } else {\n                      toggleArrayFilter('requirementTypes', type);\n                    }\n                  }}\n                  data-testid={`checkbox-requirement-type-${type}`}\n                />\n                <Label htmlFor={`req-type-${type}`} className=\"text-sm\">\n                  {type === 'Skall' ? (\n                    <Badge variant=\"destructive\" className=\"text-xs\">{type}</Badge>\n                  ) : (\n                    <Badge variant=\"secondary\" className=\"text-xs\">{type}</Badge>\n                  )}\n                </Label>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* User Status */}\n        <div className=\"space-y-3\">\n          <Label className=\"text-sm font-medium\">Status</Label>\n          <div className=\"flex flex-wrap gap-2\">\n            {['OK', 'Under utveckling', 'Senare'].map(status => (\n              <div key={status} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`status-${status}`}\n                  checked={filters.userStatus?.includes(status as any) || false}\n                  onCheckedChange={(checked) => {\n                    if (checked) {\n                      toggleArrayFilter('userStatus', status);\n                    } else {\n                      toggleArrayFilter('userStatus', status);\n                    }\n                  }}\n                  data-testid={`checkbox-status-${status}`}\n                />\n                <Label htmlFor={`status-${status}`} className=\"text-sm\">{status}</Label>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <Separator />\n\n        {/* Organizations */}\n        <Collapsible open={isOrganizationsOpen} onOpenChange={setIsOrganizationsOpen}>\n          <CollapsibleTrigger className=\"flex w-full items-center justify-between\" data-testid=\"trigger-organizations\">\n            <div className=\"flex items-center gap-2\">\n              <Building className=\"h-4 w-4\" />\n              <span className=\"text-sm font-medium\">Organisationer</span>\n              {filters.organizations?.length && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {filters.organizations.length}\n                </Badge>\n              )}\n            </div>\n            <ChevronDown className=\"h-4 w-4\" />\n          </CollapsibleTrigger>\n          <CollapsibleContent className=\"space-y-2 pt-2 max-h-48 overflow-y-auto\">\n            {availableOrganizations.map(org => (\n              <div key={org} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`org-${org}`}\n                  checked={filters.organizations?.includes(org) || false}\n                  onCheckedChange={(checked) => {\n                    if (checked) {\n                      toggleArrayFilter('organizations', org);\n                    } else {\n                      toggleArrayFilter('organizations', org);\n                    }\n                  }}\n                  data-testid={`checkbox-organization-${org}`}\n                />\n                <Label htmlFor={`org-${org}`} className=\"text-xs truncate flex-1\">{org}</Label>\n              </div>\n            ))}\n          </CollapsibleContent>\n        </Collapsible>\n\n        {/* Categories */}\n        <Collapsible open={isCategoriesOpen} onOpenChange={setIsCategoriesOpen}>\n          <CollapsibleTrigger className=\"flex w-full items-center justify-between\" data-testid=\"trigger-categories\">\n            <div className=\"flex items-center gap-2\">\n              <Tag className=\"h-4 w-4\" />\n              <span className=\"text-sm font-medium\">Kategorier</span>\n              {filters.categories?.length && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {filters.categories.length}\n                </Badge>\n              )}\n            </div>\n            <ChevronDown className=\"h-4 w-4\" />\n          </CollapsibleTrigger>\n          <CollapsibleContent className=\"space-y-2 pt-2 max-h-48 overflow-y-auto\">\n            {availableCategories.map(category => (\n              <div key={category} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`cat-${category}`}\n                  checked={filters.categories?.includes(category) || false}\n                  onCheckedChange={(checked) => {\n                    if (checked) {\n                      toggleArrayFilter('categories', category);\n                    } else {\n                      toggleArrayFilter('categories', category);\n                    }\n                  }}\n                  data-testid={`checkbox-category-${category}`}\n                />\n                <Label htmlFor={`cat-${category}`} className=\"text-xs\">{category}</Label>\n              </div>\n            ))}\n          </CollapsibleContent>\n        </Collapsible>\n\n        {/* Dates */}\n        <Collapsible open={isDatesOpen} onOpenChange={setIsDatesOpen}>\n          <CollapsibleTrigger className=\"flex w-full items-center justify-between\" data-testid=\"trigger-dates\">\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"h-4 w-4\" />\n              <span className=\"text-sm font-medium\">Datum</span>\n              {filters.dates?.length && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {filters.dates.length}\n                </Badge>\n              )}\n            </div>\n            <ChevronDown className=\"h-4 w-4\" />\n          </CollapsibleTrigger>\n          <CollapsibleContent className=\"space-y-2 pt-2 max-h-48 overflow-y-auto\">\n            {availableDates.map(date => (\n              <div key={date} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`date-${date}`}\n                  checked={filters.dates?.includes(date) || false}\n                  onCheckedChange={(checked) => {\n                    if (checked) {\n                      toggleArrayFilter('dates', date);\n                    } else {\n                      toggleArrayFilter('dates', date);\n                    }\n                  }}\n                  data-testid={`checkbox-date-${date}`}\n                />\n                <Label htmlFor={`date-${date}`} className=\"text-xs\">{date}</Label>\n              </div>\n            ))}\n          </CollapsibleContent>\n        </Collapsible>\n\n        <Separator />\n\n        {/* Options */}\n        <div className=\"space-y-3\">\n          <Label className=\"text-sm font-medium flex items-center gap-2\">\n            <Settings className=\"h-4 w-4\" />\n            Visningsalternativ\n          </Label>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"show-only-new\"\n                checked={filters.showOnlyNew || false}\n                onCheckedChange={(checked) => updateFilters({ showOnlyNew: checked || undefined })}\n                data-testid=\"checkbox-show-only-new\"\n              />\n              <Label htmlFor=\"show-only-new\" className=\"text-sm\">Visa endast nya krav</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"show-grouped\"\n                checked={filters.showGrouped || false}\n                onCheckedChange={(checked) => updateFilters({ showGrouped: checked || undefined })}\n                data-testid=\"checkbox-show-grouped\"\n              />\n              <Label htmlFor=\"show-grouped\" className=\"text-sm\">Visa grupperade krav</Label>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default SearchFilters;