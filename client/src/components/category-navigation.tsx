import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';\nimport { ChevronDown, ChevronRight, Search, Folder, FileText, Settings } from 'lucide-react';\n\ninterface Category {\n  id: string;\n  name: string;\n  count: number;\n  subcategories?: Category[];\n  expanded?: boolean;\n}\n\ninterface CategoryNavigationProps {\n  categories: Category[];\n  selectedCategory?: string;\n  onCategorySelect?: (categoryId: string) => void;\n  onConfigureCategories?: () => void;\n}\n\nexport function CategoryNavigation({ \n  categories, \n  selectedCategory, \n  onCategorySelect,\n  onConfigureCategories \n}: CategoryNavigationProps) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set());\n\n  const toggleCategory = (categoryId: string) => {\n    const newExpanded = new Set(expandedCategories);\n    if (newExpanded.has(categoryId)) {\n      newExpanded.delete(categoryId);\n    } else {\n      newExpanded.add(categoryId);\n    }\n    setExpandedCategories(newExpanded);\n  };\n\n  const filterCategories = (cats: Category[], query: string): Category[] => {\n    if (!query) return cats;\n    \n    return cats.filter(cat => \n      cat.name.toLowerCase().includes(query.toLowerCase()) ||\n      (cat.subcategories && cat.subcategories.some(sub => \n        sub.name.toLowerCase().includes(query.toLowerCase())\n      ))\n    ).map(cat => ({\n      ...cat,\n      subcategories: cat.subcategories ? filterCategories(cat.subcategories, query) : undefined\n    }));\n  };\n\n  const filteredCategories = filterCategories(categories, searchQuery);\n  const totalRequirements = categories.reduce((sum, cat) => sum + cat.count, 0);\n\n  const CategoryItem = ({ category, level = 0 }: { category: Category; level?: number }) => {\n    const hasSubcategories = category.subcategories && category.subcategories.length > 0;\n    const isExpanded = expandedCategories.has(category.id);\n    const isSelected = selectedCategory === category.id;\n\n    return (\n      <div className=\"space-y-1\">\n        <div \n          className={`flex items-center gap-2 p-2 rounded-md hover-elevate cursor-pointer ${\n            isSelected ? 'bg-primary/10 border border-primary/20' : ''\n          }`}\n          style={{ paddingLeft: `${8 + level * 16}px` }}\n          onClick={() => onCategorySelect?.(category.id)}\n          data-testid={`category-item-${category.id}`}\n        >\n          {hasSubcategories ? (\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"h-4 w-4 p-0\"\n              onClick={(e) => {\n                e.stopPropagation();\n                toggleCategory(category.id);\n              }}\n              data-testid={`toggle-category-${category.id}`}\n            >\n              {isExpanded ? <ChevronDown className=\"h-3 w-3\" /> : <ChevronRight className=\"h-3 w-3\" />}\n            </Button>\n          ) : (\n            <div className=\"h-4 w-4 flex items-center justify-center\">\n              <FileText className=\"h-3 w-3 text-muted-foreground\" />\n            </div>\n          )}\n          \n          <Folder className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n          \n          <span className=\"text-sm flex-1 truncate\" title={category.name}>\n            {category.name}\n          </span>\n          \n          <Badge variant=\"outline\" className=\"text-xs\" data-testid={`count-${category.id}`}>\n            {category.count.toLocaleString('sv-SE')}\n          </Badge>\n        </div>\n\n        {hasSubcategories && isExpanded && (\n          <div className=\"space-y-1\">\n            {category.subcategories!.map(subcat => (\n              <CategoryItem \n                key={subcat.id} \n                category={subcat} \n                level={level + 1}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-base\">Kategorier</CardTitle>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onConfigureCategories}\n            data-testid=\"button-configure-categories\"\n          >\n            <Settings className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        \n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            placeholder=\"Sök kategorier...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-9\"\n            data-testid=\"input-search-categories\"\n          />\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        <div className=\"space-y-4\">\n          {/* Summary */}\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-muted-foreground\">Totalt:</span>\n            <Badge variant=\"secondary\" data-testid=\"total-requirements\">\n              {totalRequirements.toLocaleString('sv-SE')} krav\n            </Badge>\n          </div>\n\n          {/* All Categories option */}\n          <div \n            className={`flex items-center gap-2 p-2 rounded-md hover-elevate cursor-pointer ${\n              selectedCategory === 'all' ? 'bg-primary/10 border border-primary/20' : ''\n            }`}\n            onClick={() => onCategorySelect?.('all')}\n            data-testid=\"category-item-all\"\n          >\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n            <span className=\"text-sm font-medium\">Alla kategorier</span>\n            <Badge variant=\"secondary\" className=\"ml-auto\">\n              {totalRequirements.toLocaleString('sv-SE')}\n            </Badge>\n          </div>\n\n          {/* Categories Tree */}\n          <ScrollArea className=\"h-[400px]\">\n            <div className=\"space-y-1\">\n              {filteredCategories.length === 0 && searchQuery ? (\n                <div className=\"text-center py-6 text-sm text-muted-foreground\">\n                  Inga kategorier matchar sökningen\n                </div>\n              ) : (\n                filteredCategories.map(category => (\n                  <CategoryItem key={category.id} category={category} />\n                ))\n              )}\n            </div>\n          </ScrollArea>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default CategoryNavigation;