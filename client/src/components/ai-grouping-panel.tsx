import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Separator } from '@/components/ui/separator';\nimport { Brain, Play, Pause, CheckCircle, AlertCircle, Users, Merge } from 'lucide-react';\nimport type { RequirementGroup } from '@shared/schema';\n\ninterface AIGroupingPanelProps {\n  onStartGrouping?: () => void;\n  onAcceptGrouping?: (groups: RequirementGroup[]) => void;\n  isProcessing?: boolean;\n  progress?: number;\n  suggestedGroups?: RequirementGroup[];\n  totalRequirements?: number;\n}\n\nexport function AIGroupingPanel({ \n  onStartGrouping, \n  onAcceptGrouping,\n  isProcessing = false,\n  progress = 0,\n  suggestedGroups = [],\n  totalRequirements = 0\n}: AIGroupingPanelProps) {\n  const [selectedGroups, setSelectedGroups] = useState<Set<string>>(new Set());\n\n  const toggleGroupSelection = (groupId: string) => {\n    const newSelection = new Set(selectedGroups);\n    if (newSelection.has(groupId)) {\n      newSelection.delete(groupId);\n    } else {\n      newSelection.add(groupId);\n    }\n    setSelectedGroups(newSelection);\n  };\n\n  const handleAcceptSelected = () => {\n    const selectedGroupData = suggestedGroups.filter(group => \n      selectedGroups.has(group.groupId)\n    );\n    if (onAcceptGrouping) {\n      onAcceptGrouping(selectedGroupData);\n    }\n  };\n\n  const getSimilarityColor = (score: number) => {\n    if (score >= 90) return 'text-green-600';\n    if (score >= 80) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const getSimilarityBadgeVariant = (score: number) => {\n    if (score >= 90) return 'default';\n    if (score >= 80) return 'secondary';\n    return 'outline';\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Brain className=\"h-5 w-5\" />\n          AI Kravgruppering\n        </CardTitle>\n        <p className=\"text-sm text-muted-foreground\">\n          Använd AI för att automatiskt gruppera liknande krav och minska duplicering.\n        </p>\n      </CardHeader>\n\n      <CardContent className=\"space-y-6\">\n        {/* Control Section */}\n        <div className=\"space-y-4\">\n          {!isProcessing && suggestedGroups.length === 0 && (\n            <div className=\"text-center p-6 border-2 border-dashed border-muted rounded-lg\">\n              <Brain className=\"h-12 w-12 mx-auto mb-3 text-muted-foreground\" />\n              <h3 className=\"font-semibold mb-2\">Redo för AI-analys</h3>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Analysera {totalRequirements.toLocaleString('sv-SE')} krav för att identifiera liknande innehåll\n              </p>\n              <Button \n                onClick={onStartGrouping}\n                disabled={totalRequirements === 0}\n                className=\"gap-2\"\n                data-testid=\"button-start-grouping\"\n              >\n                <Play className=\"h-4 w-4\" />\n                Starta AI-gruppering\n              </Button>\n            </div>\n          )}\n\n          {isProcessing && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium\">Analyserar krav...</span>\n                <span className=\"text-sm text-muted-foreground\">{Math.round(progress)}%</span>\n              </div>\n              <Progress value={progress} className=\"w-full\" data-testid=\"progress-grouping\" />\n              <p className=\"text-xs text-muted-foreground text-center\">\n                Detta kan ta några minuter beroende på antalet krav.\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Results Section */}\n        {suggestedGroups.length > 0 && !isProcessing && (\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                <span className=\"font-semibold\">Gruppering klar</span>\n              </div>\n              <Badge variant=\"outline\" data-testid=\"badge-groups-found\">\n                {suggestedGroups.length} grupper funna\n              </Badge>\n            </div>\n\n            {/* Summary Stats */}\n            <div className=\"grid grid-cols-3 gap-4 p-4 bg-muted rounded-lg\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold\">{suggestedGroups.length}</div>\n                <div className=\"text-xs text-muted-foreground\">Grupper</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold\">\n                  {suggestedGroups.reduce((sum, group) => sum + group.members.length, 0)}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Krav</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold\">\n                  {Math.round(\n                    suggestedGroups.reduce((sum, group) => sum + group.similarityScore, 0) / suggestedGroups.length\n                  )}%\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Snitt-likhet</div>\n              </div>\n            </div>\n\n            {/* Groups List */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"text-sm font-medium\">Föreslagna grupperingar:</h4>\n                <div className=\"flex gap-2\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => setSelectedGroups(new Set(suggestedGroups.map(g => g.groupId)))}\n                    data-testid=\"button-select-all\"\n                  >\n                    Välj alla\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    onClick={handleAcceptSelected}\n                    disabled={selectedGroups.size === 0}\n                    data-testid=\"button-accept-selected\"\n                  >\n                    Acceptera ({selectedGroups.size})\n                  </Button>\n                </div>\n              </div>\n\n              <ScrollArea className=\"h-96\">\n                <div className=\"space-y-3 pr-4\">\n                  {suggestedGroups.map((group) => (\n                    <Card \n                      key={group.groupId} \n                      className={`hover-elevate cursor-pointer transition-colors ${\n                        selectedGroups.has(group.groupId) \n                          ? 'ring-2 ring-primary bg-primary/5' \n                          : ''\n                      }`}\n                      onClick={() => toggleGroupSelection(group.groupId)}\n                      data-testid={`card-group-${group.groupId}`}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-start justify-between gap-3\">\n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <Users className=\"h-4 w-4\" />\n                                <span className=\"text-sm font-medium\">\n                                  Grupp {group.groupId}\n                                </span>\n                                <Badge \n                                  variant={getSimilarityBadgeVariant(group.similarityScore)}\n                                  className={getSimilarityColor(group.similarityScore)}\n                                >\n                                  {group.similarityScore}% likhet\n                                </Badge>\n                              </div>\n                              {group.category && (\n                                <Badge variant=\"outline\" className=\"text-xs mb-2\">\n                                  {group.category}\n                                </Badge>\n                              )}\n                            </div>\n                            <div className=\"flex flex-col items-end gap-1\">\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {group.members.length} krav\n                              </Badge>\n                              {group.similarityScore < 80 && (\n                                <AlertCircle className=\"h-4 w-4 text-yellow-600\" />\n                              )}\n                            </div>\n                          </div>\n                          \n                          <div className=\"text-xs text-muted-foreground\">\n                            <p className=\"mb-1\">Representativ: {group.representativeId}</p>\n                            <p>Medlemmar: {group.members.slice(0, 3).join(', ')}\n                              {group.members.length > 3 && ` +${group.members.length - 3} till`}\n                            </p>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </ScrollArea>\n            </div>\n\n            <Separator />\n\n            <div className=\"text-xs text-muted-foreground p-3 bg-muted rounded-lg\">\n              <div className=\"flex items-start gap-2\">\n                <AlertCircle className=\"h-4 w-4 mt-0.5 flex-shrink-0\" />\n                <div>\n                  <p className=\"font-medium mb-1\">Tips för gruppering:</p>\n                  <ul className=\"space-y-1 text-xs\">\n                    <li>• Grupper med 90%+ likhet är oftast säkra att acceptera</li>\n                    <li>• 80-89% likhet bör granskas manuellt</li>\n                    <li>• Under 80% likhet rekommenderas ej utan noggrann granskning</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default AIGroupingPanel;